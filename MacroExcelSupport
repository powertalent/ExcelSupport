Function MoveToFirstSheet()
    ActiveWorkbook.Sheets(1).Select
End Function

Function MoveToLastSheet()
    ActiveWorkbook.Sheets(ActiveWorkbook.Sheets.Count).Select
End Function

Sub Translate()
    SelectedValue = ActiveCell.Value
    If (SelectedValue = "") Then
        ThisWorkbook.Sheets(1).Range("A1").Value = GetClipBoardText()
    Else
        ThisWorkbook.Sheets(1).Range("A1").Value = ActiveCell.Value
    End If
        
    Pronunciation = ThisWorkbook.Sheets(1).Range("C1")
    Meaning = ThisWorkbook.Sheets(1).Range("B1")
    MsgBox (Pronunciation & vbNewLine & Meaning)
End Sub

Function GetClipBoardText() As String
   ' Microsoft Form 2.0 (FM2.0.dll)
   Dim DataObj As MSForms.DataObject
   Set DataObj = New MSForms.DataObject '<~~ Amended as per jp's suggestion

   On Error GoTo Whoa

   '~~> Get data from the clipboard.
   DataObj.GetFromClipboard

   '~~> Get clipboard contents
   myString = DataObj.GetText(1)
   GetClipBoardText = myString
   Exit Function
Whoa:
   GetClipBoardText = ""
End Function

Function KatakanaToHiragana(strKata As String) As String
    KatakanaToHiragana = StrConv(strKata, vbHiragana)
End Function

Function HiraganaToKatakana(strHira As String) As String
    HiraganaToKatakana = StrConv(strHira, vbKatakana)
End Function

Function getParentImageName(ByRef dic As Dictionary, ByVal shape As Object) As String
Dim topMid
Dim leftMid
topMid = shape.Top + shape.Height / 2
leftMid = shape.Left + shape.Width / 2
For Each keyImg In dic.keys
    If ((dic.Item(keyImg).Top <= topMid) And (topMid <= (dic.Item(keyImg).Top + dic.Item(keyImg).Height)) And (dic.Item(keyImg).Left <= leftMid) And (leftMid < (dic.Item(keyImg).Left + dic.Item(keyImg).Width))) Then
    getParentImageName = keyImg
    GoTo Out:
    End If
Next
    getParentImageName = ""
Out:
End Function

Public Sub ShowMsg(ByVal msg As String)
    Application.StatusBar = msg
    Application.OnTime Now + TimeValue("00:00:05"), "ClearMsg"
End Sub

Public Sub ClearMsg()
    Application.StatusBar = ""
End Sub

Function TranslateLongString(str As String) As String
    strLen = Len(str)
    
    ' Exit if Str is Empty
    If (strLen = 0) Then
        Exit Function
    End If
    i = strLen
    
    ' Define Max Word Length in Dictionary : 10
    If (i > 10) Then
        i = 10
    End If
        
    ' Find Word Meaning
    Do While i >= 1
        ThisWorkbook.Sheets(1).Range("A1").Value = Left(str, i)
        Meaning = ThisWorkbook.Sheets(1).Range("B1").Value
        If (Meaning <> "NOT FOUND") Then
            Exit Do
        End If
        i = i - 1
    Loop
    
    ' If Not Found In Dictionary Return Original Value
    If (i = 0) Then
        i = 1
        Meaning = ThisWorkbook.Sheets(1).Range("A1").Value
        TranslateLongString = Meaning & "" & TranslateLongString(Right(str, strLen - i))
        Exit Function
    End If
    
    ' Return Meaning and Continue Translate
    TranslateLongString = "_" & Meaning & "_" & TranslateLongString(Right(str, strLen - i))
    
End Function

Sub ShapeTest()
    'text box and owl logo, plus connector
'    Dim rect As shape
'    Dim Logo As shape
'    Dim conn As shape
'    'set reference to a worksheet
'    Set w = ActiveSheet
'    'add the text box
'    Set rect = w.Shapes.AddShape(1, 10, 10, 80, 20)
'    rect.TextFrame.Characters.Text = "Curve"
'    rect.Fill.ForeColor.RGB = RGB(227, 214, 213)
'    rect.TextFrame.Characters.Font.ColorIndex = 1
'    Set Logo = w.Shapes.AddShape(1, 30, 80, 50, 50)
'    Set conn = w.Shapes.AddConnector(msoConnectorCurve, 1, 1, 1, 1)
'    conn.ConnectorFormat.BeginConnect rect, 1
'    conn.ConnectorFormat.EndConnect Logo, 1

    Dim ActiveShape As shape
    Dim UserSelection As Variant
    
    'Pull-in what is selected on screen
      Set UserSelection = ActiveWindow.Selection
    
    'Determine if selection is a shape
      On Error GoTo NoShapeSelected
        Set ActiveShape = ActiveSheet.Shapes(UserSelection.Name)
                '
        Set connectedLine = ActiveSheet.Shapes(getBeginConnectedLineName(UserSelection.Name))
        
        clLeft = ActiveShape.Left
        clTop = ActiveShape.Top + 100
        Set newRect = ActiveSheet.Shapes.AddShape(1, clLeft, clTop, 50, 50)
        
        'Set conn = ActiveSheet.Shapes.AddConnector(msoConnectorCurve, 1, 1, 1, 1)
        'Set conn = ActiveSheet.Shapes.AddConnector(msoConnectorElbow, 1, 1, 1, 1)
        Set conn = ActiveSheet.Shapes.AddConnector(msoConnectorStraight, 1, 1, 1, 1)
        'conn.BeginArrowheadStyle = msoArrowheadOpen
        
        conn.ConnectorFormat.BeginConnect ActiveShape, 3
        conn.ConnectorFormat.EndConnect newRect, 1
        conn.Line.EndArrowheadStyle = msoArrowheadOpen
        
'        With Selection.ShapeRange.Line
'        .BeginArrowheadStyle = msoArrowheadNone
'        .EndArrowheadStyle = msoArrowheadOpen
'        End With
        
        
        If (connectedLine.Name <> "") Then
            connectedLine.ConnectorFormat.BeginConnect newRect, 3
        End If
      On Error Resume Next
    
    'Do Something with your Shape variable
      'MsgBox "You have selected the shape: " & ActiveShape.Name
    
    Exit Sub
    
    'Error Handler
NoShapeSelected:
      MsgBox "You do not have a shape selected!"
End Sub

Function hasConnectedLine(shapeName As String) As Boolean
    For Each shape In ActiveSheet.Shapes
        'If shape.Type = msoConnectorStraight Then
        If (shape.Connector = msoFalse) Then GoTo NextIteration
        If (shape.ConnectorFormat.BeginConnected = msoFalse) Then GoTo NextIteration
        If (shape.ConnectorFormat.BeginConnectedShape.Name = shapeName) Then
            hasConnectedLine = True
            Exit Function
        End If
NextIteration:
    Next shape
    
    hasConnectedLine = False
End Function

Function getBeginConnectedLineName(shapeName As String) As String
    For Each shape In ActiveSheet.Shapes
        'If shape.Type = msoConnectorStraight Then
        If (shape.Connector = msoFalse) Then GoTo NextIteration
        If (shape.ConnectorFormat.BeginConnected = msoFalse) Then GoTo NextIteration
        If (shape.ConnectorFormat.BeginConnectedShape.Name = shapeName) Then
            getBeginConnectedLineName = shape.Name
            Exit Function
        End If
NextIteration:
    Next shape
    
    getBeginConnectedLineName = ""
End Function

Sub auto_open()
    Application.OnKey "^%{PGUP}", "MoveToFirstSheet"
    Application.OnKey "^%{PGDN}", "MoveToLastSheet"
    Application.OnKey "^q", "Translate"
End Sub
